import asyncio
from aiogram import Router, types, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.keyboards import start_keyboard, confirm_keyboards
from app.db import conn, cursor
from config import token
from aiogram import Bot
from datetime import datetime
import aioschedule, logging
from aiogram.exceptions import TelegramBadRequest

router = Router() 
bot = Bot(token=token)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Users(StatesGroup):
    full_name = State()
    age = State()
    phone = State()
    schedules = State()
    deadline = State()


users_data = {}
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
scheduled_tasks = {}


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start(message: Message):
    users_data['chat_id'] = message.chat.id
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=start_keyboard)


@router.callback_query(F.data == "register")
async def register(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
    await state.set_state(Users.full_name)


@router.message(Users.full_name)
async def full_name_(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(Users.age)


@router.message(Users.age)
async def age_(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(Users.phone)


@router.message(Users.phone)
async def phone_(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    full_name = data['full_name']
    age = data['age']
    phone = data['phone']
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!\n\n–§–ò–û - {full_name}.\n–í–æ–∑—Ä–∞—Å—Ç - {age}.\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {phone}.", reply_markup=confirm_keyboards)


@router.callback_query(lambda callback: callback.data in {"confirm", "cancel"})
async def confirm_(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm":
        data = await state.get_data()
        full_name = data['full_name']
        age = data['age']
        phone = data['phone']
        chat_id = callback.message.chat.id
        cursor.execute("INSERT INTO users (id, full_name, age, phone, chat_id) VALUES (?, ?, ?, ?, ?)", (callback.message.from_user.id, full_name, age, phone, chat_id))
        conn.commit()
        await state.clear()
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ")
    elif callback.data == "cancel":
        await state.clear()
        await callback.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")



@router.message(Command("set_schedule"))
async def set_schedule(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.12.2024 13:30):")


@router.message()
async def handle_time_input(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_input = message.text.strip()

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
        schedule_time = datetime.strptime(user_input, "%d.%m.%Y %H:%M")

        now = datetime.now()

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if schedule_time <= now:
            await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            UPDATE users 
            SET chat_id = ?, time_schedule = ?
            WHERE id = ?
        """, (chat_id, user_input, user_id))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        await message.answer(f"–í–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {user_input}.")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM –¥–ª—è aioschedule
        time_to_notify = schedule_time.strftime("%H:%M")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aioschedule
        aioschedule.every().day.at(time_to_notify).do(notify_user, chat_id)

    except ValueError:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.12.2024 13:30).")


logging.basicConfig(level=logging.DEBUG)

async def notify_user(chat_id):
    logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    await bot.send_message(chat_id, "–ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É!")




from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from app.keyboards import start_keyboard, tovars_keyboard, confirm_cancel_keyboard


router = Router()


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ãüëá", reply_markup=start_keyboard)


@router.callback_query(F.data == "menu")
async def menu(callback: CallbackQuery):
    await callback.message.answer("–í–æ—Ç –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ãüëá", reply_markup=tovars_keyboard)


@router.callback_query(lambda callback: callback.data in {"iphone", "samsung", "mi"})
async def phones(callback: CallbackQuery):
    if callback.data == "iphone":
        await callback.message.answer_photo("https://ostore.kg/upload/resize_cache/iblock/a0b/500_500_1/a0b8f9411e1e1393ea959508fab9fd1b.png", caption="–¢–æ–≤–∞—Ä - Apple iPhone 16 Pro Max 256GB\n–¶–µ–Ω–∞ - 133990 —Å–æ–º", reply_markup=confirm_cancel_keyboard)

    elif callback.data == "samsung":
        await callback.message.answer_photo("https://www.myphone.kg/cache/files/23789.webp_w800_h800_resize.webp?t=1720879438", caption="–¢–æ–≤–∞—Ä - Samsung Galaxy Z Fold 6 5G 12+512Gb\n–¶–µ–Ω–∞ - 139 990 —Å–æ–º", reply_markup=confirm_cancel_keyboard)

    elif callback.data == "mi":
        await callback.message.answer_photo("https://www.kivano.kg/images/product/141840/173019482024775_full.jpg", caption="–¢–æ–≤–∞—Ä - Xiaomi 14T 12/256GB\n–¶–µ–Ω–∞ - 41740 —Å–æ–º", reply_markup=confirm_cancel_keyboard)


@router.callback_query(lambda callback: callback.data in {"confirm", "cancel"})
async def confirm_cancel(callback: CallbackQuery):
    if callback.data == "confirm":
        await callback.message.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω‚úÖ")

    elif callback.data == "cancel":
        await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω‚ùå")